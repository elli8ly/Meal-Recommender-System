---
title: "Meal Recommender System"
output:
  pdf_document: default
  html_document: default
---


---
title: "Meal Recommender System"
output: html_document
---

## Du Duong / Elliot Ly / Daniel Saakian / Jim-Lee Wu

# Introduction
We plan on using the meals from this data to filter for “healthy” meals relating to whatever the user-specified goal is, whether that be bulking, cutting weight, increase/decrease in a specific vital, eating healthy, fat loss, etc. We would then take user inputted weight and height to calculate bmi. Using the bmi and their specific goals and/or dietary restrictions out recommender system would create a daily meal plan that satisfies the users requirements.

# Data Description
We obtained our recipe data set from [kaggle](https://www.kaggle.com/code/hsggskbsbsjsjkk/diet-recommendation-system/input). This data set contains over 500,000 recipes across 312 different categories from Food.com. The dataset provides information about individual recipes including: cooking time, ingredients, nutrition, instructions, and more. We will be cleaning this data set later on to cater to our specific recommender system.

# Project Steps
For this project, we aim to develop a personalized meal recommendation system based on a user's nutritional needs, fitness goals, and dietary restrictions. Our approach combines nutritional calculations, K-Nearest Neighbors (KNN) for meal similarity, and TF-IDF cosine similarity for ingredient-based refinement to generate tailored meal suggestions.

- User-Specific Nutritional Needs: 
We start by calculating the user's Basal Metabolic Rate (BMR) and Total Daily Energy Expenditure (TDE) based on their weight, height, age, sex, activity level, and fitness goal, weight loss, muscle gain, or maintenance. From TDE, we derive nutritional distributions, like protein, carbs, and fats, specific to the user's goal.

- Filtering Meals Based on Nutritional Fit: 
Since finding meals that exactly match the required macros is impractical, we allow flexibility by selecting meals that fall within 80% to 120% of the required nutrition values. We also filter out meals containing allergens specified by the user.

- K-Nearest Neighbors (KNN) for Meal Similarity: 
To refine the meal selection, we use KNN with cosine similarity on a scaled dataset of meal nutrition facts: Calories, Protein, Fat, Carbs. We find 10 meals closest to the user’s target macros, ensuring they align with their dietary needs.

- Ingredient-Based Refinement with TF-IDF Cosine Similarity: 
To further improve recommendations, we apply Term Frequency-Inverse Document Frequency (TF-IDF) on the ingredient lists. This method helps us rank meals based on their ingredient similarity to the selected meals from KNN. Finally, we choose the top 3 meals that best match the user’s preferences while maintaining the macronutrient balance.

# Loading and Cleaning the Dataset

## Load packages

```{r}
library(dplyr)
library(stringr)
library(tidyr)
library(tidymodels)
library(tidyverse)
library(tidytext)
library(corrplot)
library(caret)
```

## Data Cleaning
Load in our recipe data set.

```{r}
recipes <- read.csv("/Users/elliotly/Desktop/PSTAT Projects/PSTAT134Project/recipes.csv")
head(recipes)
```

At first glance, the dataset contains 28 variables, many of which are irrelevant to our recommendation system. Thus, we will remove non-essential variables such as AuthorId, AuthorName, DatePublished, Description, Images, ReviewCount, RecipeYield, RecipeServings, and RecipeInstructions.

Since our focus is on main nutrition values, we will also drop SaturatedFatContent, CholesterolContent, SodiumContent, FiberContent, and SugarContent, keeping only Calories, FatContent, CarbohydrateContent, and ProteinContent for nutritional analysis.

For time-related variables, the dataset includes CookTime, PrepTime, and TotalTime in the "PT#H#M" format. To simplify, we will convert TotalTime into minutes and rename it TotalCookTime, ensuring a single numerical cook time variable.

Finally, to maintain reasonable and healthy recommendations, we will filter out recipes with fewer than 300 calories or more than 2,000 calories, as well as those requiring over 400 minutes to prepare and cook. These steps refine our dataset to better align with user needs.


```{r}
recipes <- recipes %>% 
  # reformat Total cook time to minutes
  select(!c(AuthorId, AuthorName, DatePublished, Description, Images, ReviewCount, RecipeYield, RecipeServings, RecipeInstructions, SaturatedFatContent, CholesterolContent, SodiumContent, FiberContent, SugarContent)) %>%
  mutate(
    Hours = ifelse(str_detect(TotalTime, "H"), as.numeric(str_extract(TotalTime, "(?<=PT)\\d+(?=H)")), 0),
    Minutes = ifelse(str_detect(TotalTime, "M"), as.numeric(str_extract(TotalTime, "(?<=H|PT)\\d+(?=M)")), 0),
    TotalCookTime = (Hours * 60) + Minutes
  ) %>%
  select(!c(CookTime, PrepTime, TotalTime, Hours, Minutes)) %>% 
  filter(Calories <= 2000 & Calories >= 300 & TotalCookTime <= 400)

head(recipes)
```

After performing basic cleaning on the dataset, the next step is to examine the extent of missing data. The visualization below provides an overview of missing (NA) and non-missing (Non-NA) values.

## Distribution of Missing vs. Non-Missing Values

```{r, fig.width=17, fig.height = 7}
missing_counts <- recipes %>%
  summarise(across(everything(), ~ sum(is.na(.)))) %>%
  pivot_longer(cols = everything(), names_to = "Variable", values_to = "NAs") %>%
  mutate(NON_NA = nrow(recipes) - NAs) %>%
  pivot_longer(cols = c("NAs", "NON_NA"), names_to = "Status", values_to = "Count")
ggplot(missing_counts, aes(x = Variable, y = Count, fill = Status)) +
  geom_bar(stat = "identity", position = "stack") + 
  labs(x = "Variables in Recipes", y = "Counts of NA vs Non-NA", title = "Distribution of Missing vs. Non-Missing Values") +
  scale_fill_manual(values = c("NAs" = "red", "NON_NA" = "lightblue")) +
  theme_minimal()
```

The variables AggregatedRating and ReviewCounts contain a significant number of missing values, which could impact the reliability of our recommendations. Additionally, some entries are missing keywords, a crucial aspect of our project since keywords help in categorizing and recommending recipes effectively.

## Data Filtering
- Filter out recipes with no reviews or with a rating below 3 – Since the goal is to suggest well-rated meals, low-rated or unrated recipes may not be suitable/needed for recommendations.

- Handling missing keywords – Since keywords play a key role in our meal classification, we may need to infer missing keywords from other recipe attributes or remove recipes with insufficient information.

```{r}
recipes <- recipes %>%
  filter(AggregatedRating >=3 & !is.na(AggregatedRating) & !is.na(Keywords))
dim(recipes)
```

After filtering through the data, we reassess the missing data distribution.

```{r, fig.width = 8, fig.height = 6}
missing_counts <- recipes %>%
  summarise(across(everything(), ~ sum(is.na(.)))) %>%
  pivot_longer(cols = everything(), names_to = "Variable", values_to = "NAs") %>%
  mutate(NON_NA = nrow(recipes) - NAs) %>%
  pivot_longer(cols = c("NAs", "NON_NA"), names_to = "Status", values_to = "Count")
ggplot(missing_counts, aes(x = Variable, y = Count, fill = Status)) +
  geom_bar(stat = "identity", position = "stack") + 
  labs(x = "Variables in Recipes", y = "Counts of NA vs Non-NA", title = "Distribution of Missing vs. Non-Missing Values") +
  scale_fill_manual(values = c("NAs" = "red", "NON_NA" = "lightblue")) +
  theme_minimal()
```

With no remaining NA values, the dataset is now cleaner and more reliable!

## Parsing List-Based Variables
The variables Keywords, RecipeIngredientQuantities, and RecipeIngredientParts contain list values stored as strings. To properly use and process these values, we need to convert them into actual lists.

```{r}
recipes <- recipes %>%
  mutate(
    Keywords = map(Keywords, ~ eval(parse(text = .))),
    RecipeIngredientQuantities = map(RecipeIngredientQuantities, ~ eval(parse(text = .))),
    RecipeIngredientParts = map(RecipeIngredientParts, ~ eval(parse(text = .))),
  )
```

Converting these variables into lists allows for easier manipulation, enabling advanced filtering, searching, and analysis. While having structured keywords and ingredients will enhance our ability to more procisely categorize and recommend recipes. 

## Incorporating Allergen Information into Recipes
To enhance our recommendation system, we will need to account for food allergies. The new column, Allergen_Status, identifies whether a recipe contains allergens based on its ingredients.
We classify allergens into six main groups:

- Dairy: milk, cream, cheese, butter, yogurt, whey, casein
- Nuts: almond, peanut, cashew, walnut, hazelnut, pistachio
- Gluten: wheat, barley, rye, malt, triticale
- Soy: soy, soybean, tofu, edamame, miso
- Egg: egg, albumin, mayonnaise
- Seafood: shrimp, crab, lobster, oyster, fish, anchovy, tuna

```{r}
allergen_dict <- list(
  Dairy = c("milk", "cream", "cheese", "butter", "yogurt", "whey", "casein"),
  Nuts = c("almond", "peanut", "cashew", "walnut", "hazelnut", "pistachio"),
  Gluten = c("wheat", "barley", "rye", "malt", "triticale"),
  Soy = c("soy", "soybean", "tofu", "edamame", "miso"),
  Egg = c("egg", "albumin", "mayonnaise"),
  Seafood = c("shrimp", "crab", "lobster", "oyster", "fish", "anchovy", "tuna")
)
check_allergens <- function(ingredients) {
  present_allergens <- names(keep(allergen_dict, function(words) {
    any(str_detect(str_to_lower(ingredients), paste(words, collapse = "|")))
  }))
  
  if (length(present_allergens) == 0) {
    return("Allergen-Free")
  } else {
    return(paste(present_allergens, collapse = ", "))
  }
}
recipes <- recipes %>%
  mutate(Allergen_Status = map_chr(RecipeIngredientParts, check_allergens))
```

```{r}
head(recipes)
dim(recipes)
```

After cleaning and adding allergen information, we have 122,716 recipes with 13 variables. Each recipe now includes an Allergen_Status column, allowing users to filter recipes based on dietary restrictions. With a cleaned and properly structured dataset with all our needed variables, we are now ready to proceed with Exploratory Data Analysis (EDA) to look at the patterns in the dataset!

# EDA

## Distribution of Calories in Recipes
To understand the caloric content of meals, we should visualize the distribution of calories across all recipes:

```{r}
recipes %>%
  ggplot(aes(x = Calories)) +
  geom_histogram(color = "lightblue") +
  theme_minimal() +
  labs(title = "Distribution of Calories Across All Recipes",
       x = "Calories",
       y = "Count")
```

Looking at the graph most recipes have a calorie count below 1000. The majority of recipes fall within the 350-400 calorie range. The distribution is right-skewed, meaning a small number of recipes have very high calorie counts. This insight is important for our recommender system, as some users may prefer low-calorie or high-calorie meal options.

## Correlation Analysis Between Numerical Variables
To explore relationships between numerical attributes, such as calories, ratings, and nutritianl content, we need to generate a correlation matrix:

```{r}
correlation_matrix <- recipes %>%
  select(AggregatedRating, Calories, FatContent, CarbohydrateContent, ProteinContent, TotalCookTime) %>%
  cor(use = "complete.obs")
corrplot(correlation_matrix,method = "color",type = "lower", addCoef.col = "black", number.cex = 0.8)
```

- Calories vs. Fat/Carbohydrates/Protein: 
There is positive correlation (1.0), meaning recipes with higher calorie content tend to have higher nutritianl values. This is expected since calorie count is largely determined by fat, carbs, and protein content.

- Calories vs. TotalCookTime: 
A weak correlation (0.7), suggests that the time required to cook a meal does not significantly impact its caloric value.

- AggregatedRating vs. Nutritional Content: 
No strong correlation between ratings and calories, macronutrients, or cook time. This indicates that people rate meals independently of their nutritional content, emphasizing that taste or other factors play a bigger role in determining ratings.

## Calories and Fat Content

```{r}
recipes %>%
  ggplot(aes(x = Calories, y = FatContent)) +
  geom_point(alpha = 0.3, color = "lightblue") +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(title = "Calories vs. Fat Content", x = "Calories", y = "Fat Content") +
  theme_minimal()
```

The scatter plot shows a positive correlation between calories and fat content. As calories increase, fat content also increases. This aligns with nutritional logic since fat is a calorie dense nutrient. The linear trend line confirms this upward trend. However, there is variability in fat content, as some high-calorie meals contain less fat, likely due to higher carb or protein content.

## Protein and Carbohydrate Content

```{r}
recipes %>%
  ggplot(aes(x = ProteinContent, y = CarbohydrateContent)) +
  geom_point(alpha = 0.3, color = "lightblue") +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(title = "Protein Content vs. Carbohydrate Content", 
       x = "Protein Content", y = "Carbohydrate Content") +
  theme_minimal()
```

The scatter plot shows a weak negative correlation between protein and carbohydrate content. Meals higher in protein tend to have lower carbohydrate content and vice versa. This makes sense, as meals with a high protein focus, like meat based meals, tend to have lower carbs, while high carb meals, like pasta or bread based meals, tend to have lower protein. The trend line slightly slopes downward, confirming the relationship.

## Ratings by Calorie Groups

```{r}
recipes %>%
  mutate(CalorieGroup = cut(Calories, breaks = c(0, 300, 600, 1000, 2000),
                            labels = c("0-300", "300-600", "600-1000", "1000-2000"))) %>%
  ggplot(aes(x = CalorieGroup, y = AggregatedRating, fill = CalorieGroup)) +
  geom_boxplot() +
  labs(title = "Ratings by Calorie Groups", x = "Calories", y = "Aggregated Rating") +
  theme_minimal()
```

Mid-range calorie meals, 300-600 calories, have the highest median ratings, indicating that people tend to prefer meals in this range. Very low calorie, 0-300, and high calorie meals, 1000-2000, have more varied ratings, as they may contain both well received and poorly received recipes. There is no clear trend suggesting that higher calorie meals receive better or worse ratings overall. This suggests that calorie count alone does not determine whether a meal is highly rated other factors like taste, preparation time, and ingredients may play a more significant role. However, another fact to keep in mind is that we filtered out meals with lower then 3 stars, so our observations could be biased.

## Calorie Distribution for Allergen-Free vs. Non-Allergen-Free Meals

```{r}
allergen_sep <- recipes %>%
  separate_rows(Allergen_Status, sep = ", ")
allergen_sep %>%
  ggplot(aes(x = Allergen_Status, y = Calories, fill = Allergen_Status)) +
  geom_boxplot() +
  labs(title = "Calorie Distribution for Allergen-Free vs. Non-Allergen-Free Meals", 
       x = "Allergen Status", y = "Calories") +
  theme_minimal()
```

Allergen free meals tend to have higher calories on average compared to meals containing allergens. Meals containing dairy and nuts generally have higher calorie content, which makes sense since these ingredients are often calorie dense. Seafood or egg based meals however, seem to have lower calories, possibly due to the lean nature of those products.

## Proportion of Allergen-Free Meals by Meal Type

```{r, fig.width=6, fig.height = 4}
top_10_categories <- allergen_sep %>%
  count(RecipeCategory, sort = T) %>%
  top_n(10, n) %>%
  pull(RecipeCategory)
recipes_top10 <- allergen_sep %>%
  filter(RecipeCategory %in% top_10_categories)
recipes_top10 %>%
  ggplot(aes(x = RecipeCategory, fill = Allergen_Status)) +
  geom_bar(position = "fill") +
  labs(title = "Proportion of Allergen-Free Meals by Meal Type",
       x = "Meal Type", y = "Proportion") +
  theme_minimal()
```

Some meal type, like vegetables, have a higher proportion of allergen free meals compared to others. Baked goods and desserts tend to have a lower proportion of allergen free options, likely due to the frequent use of dairy, gluten, and nuts in the recipes. We are looking at this because users might be looking for allergen free meal recommendations in specific categories.

# Calculations and Model Fitting
We will be using Cosine Similarity and K Nearest Neighbors in unison to enhance the recomenders accuracy.

## Body Mass Index (BMI) 
Converts weight from lbs to kg and height from inches to cm. Uses the BMI formula:

BMI = weight(kg) / (height(m)) ^2

This helps categorize individuals into underweight, normal weight, overweight, or obese categories. This can be used to adjust dietary recommendations, lower calorie intake for overweight individuals.

```{r}
lbs_to_kg <- function(weight) {
  return(weight * 0.453592)
}
in_to_cm <- function(height) {
  return(height * 2.54)
}
calculate_bmi <- function(weight, height) {
  weight_kg <- lbs_to_kg(weight)
  height_cm <- in_to_cm(height)
  bmi <- weight_kg / ((height_cm / 100) ^ 2)
  return(bmi)
}
```

## Basal Metabolic Rate (BMR) 
Uses the Mifflin-St Jeor Equation to estimate BMR:

Men: BMR = (10 × weight(kg)) + (6.25 × height(cm)) − (5 × age) + 5

Women: BMR = (10 × weight(kg)) + (6.25 × height(cm)) − (5 × age) − 161

This determines the calories burned at rest, which is critical for calculating daily calorie needs.

```{r}
calculate_bmr <- function(weight, height, age, sex) {
  if (sex == "M") {
    return(10 * weight + 6.25 * height - 5 * age + 5)
  } else {
    return(10 * weight + 6.25 * height - 5 * age - 161)
  }
}
```

## Total Daily Energy Expenditure (TDEE)
Adjusts calorie needs based on activity level and goal:

Activity levels:
- Sedentary (1.2): Little to no exercise
- Lightly active (1.375): 1-3 days per week of exercise
- Moderately active (1.55): 3-5 days per week of exercise
- Very active (1.725): 6-7 days per week of exercise
- Super active (1.9): Intense daily training

Fitness goals:
- Weight loss: 20% calorie deficit
- Muscle gain: 15% calorie surplus
- Maintenance: Calories remain the same

```{r}
#Total Daily Energy Expenditure (TDE) AKA reference amount of calories you should be consuming in our case.
calculate_tde <- function(bmr, activity_level, fitness_goal) {
  activity_energy <- c(1.2,1.375, 1.55, 1.725, 1.9)
  tde <- bmr * activity_energy[activity_level]
  fitness_goal <- tolower(trimws(fitness_goal))
  if (fitness_goal == "weight loss") {
    adj_tde <- tde * 0.8  # 20% calorie deficit
  } else if (fitness_goal == "muscle gain") {
    adj_tde <- tde * 1.15 # 15% calorie surplus
  } else {
    adj_tde <- tde # Maintenance
  }
  return(adj_tde)
}
```

## Macronutrient Calculation Based on Fitness Goals
Macronutrient distribution for different goals:

Weight Loss:
- High protein (40%): Maintains muscle
- Lower carbs (30%): Supports fat loss
- Moderate fat (30%): Supports satiety

Muscle Gain:
- Moderate protein (30%): Supports muscle growth
- Higher carbs (50%): Provides energy for workouts
- Lower fat (20%): Keeps calorie surplus manageable

Maintenance:
- Balanced distribution for weight stability

```{r}
#Macronutrient Necessities
calculate_macros <- function(tde, fitness_goal) {
  fitness_goal <- tolower(trimws(fitness_goal))
  if (fitness_goal == "weight loss") {
    return(c("Protein"= 0.4 * tde/4, "Carbohydrates"= 0.3 * tde/4, "Fats" = 0.3 * tde/9, "Calories" = tde))
  } else if (fitness_goal == "muscle gain") {
    return(c("Protein"= 0.3 * tde/4, "Carbohydrates"= 0.5 * tde/4, "Fats" = 0.2* tde/9, "Calories" = tde))
  } else {
    return(c("Protein"= 0.25 * tde/4, "Carbohydrates"= 0.45 * tde/4, "Fats" = 0.3 * tde/9, "Calories" = tde))
  }
}
```

## Meal Combination Filtering
Before fitting the models, it is important to note that we want to display three meals that total to the macronutrients found above, but because finding recipes that will be exact is very difficult, and frankly slim to none, the total calories/protein/carbohydrate/fat intake will be within the range of 80% to 120%, giving a wider range. Along with this, each meal is equally portioned in this regard.

```{r}
filter_meals <- function(recipes, user_input) {
  within_range <- function(macro, target_macro) {
    return(macro >= 0.8 * target_macro & macro <= 1.2 * target_macro)
  }
  
  #divide by 3 for an equal distribution of calories throughout the day for 3 meals
  filtered_recipes <- recipes %>%
    filter(
      within_range(Calories, user$macros["Calories"] / 3),
      within_range(ProteinContent, user$macros["Protein"] / 3),
      within_range(CarbohydrateContent, user$macros["Carbohydrates"] / 3),
      within_range(FatContent, user$macros["Fats"] / 3)
    )
  if (!is.null(user_input$allergies) && length(user_input$allergies) > 0) {
    filtered_recipes <- filtered_recipes %>%
      filter(!str_detect(Allergen_Status, paste(user_input$allergies, collapse = "|")))
  }
  
  return(filtered_recipes)
}
```

# KNN model fitting 
The model begins by selecting key nutritional features, calories, protein, fat, and carbs, from the recipes dataset. These values are then standardized using scale() to ensure balanced distance calculations, preventing larger numerical values like calories from overpowering smaller ones, ex. protein. Next, the user's macronutrient needs are converted into a feature vector, user_vector, containing their daily target calories, protein, carbs, and fats. 

The K-Nearest Neighbors (KNN) algorithm is then applied with k = 10, finding the 10 closest recipes to the user's nutritional requirements. However, after this, the function randomly would selects 10 recipes, slice_sample(n = 10), which may override KNN’s precision.

To further refine the recommendations, cosine similarity will be used to narrow the list down to 3 best recipes based on ingredient similarities. This ensures that the final recommendations are not just nutritionally aligned but also contain similar ingredients for a practical meal plan.

```{r}
nuitrition_facts <- recipes %>%
  select(RecipeId, Calories, ProteinContent, FatContent, CarbohydrateContent)
nuitrition_facts_scaled <- nuitrition_facts %>%
  select(-RecipeId) %>%
  scale() %>%
  as.data.frame()
nuitrition_facts_scaled$RecipeId <- nuitrition_facts$RecipeId
library(class)
knn_fitting <- function(nuitrition_facts_scaled, recipes, user_data) { 
  user_vector <- matrix(c(user_data["Calories"], 
                          user_data["Protein"], 
                          user_data["Carbohydrates"], 
                          user_data["Fats"]), 
                        nrow = 1, byrow = TRUE)
  
  train_data <- nuitrition_facts_scaled %>% select(-RecipeId)
  
  knn_res <- knn(train = train_data, 
                 test = user_vector, 
                 cl = nuitrition_facts_scaled$RecipeId, 
                 k = 10)
  
  recommended_recipes <- recipes %>% filter(RecipeId %in% knn_res)
  
  recommended_recipes <- recipes %>%
      slice_sample(n = 10)
  
  return(recommended_recipes)
  }
```

# Applying TF-IDF and Cosine Similarity for Ingredient Based Recommendation

This function refines the KNN-selected recipes by applying TF-IDF to assess ingredient similarities. The goal is to ensure that the final meal recommendations matches the user's nutritional needs as well as share ingredient similarities for a more practical meal plan.

First, the function converts RecipeIngredientParts, a list, into a character format, allowing tokenization. It then tokenizes ingredients into individual words and calculates their TF-IDF scores. This then highlight the most significant ingredients in each recipe while reducing the impact of commonly used words.

Next, cosine similarity is applied by matching the TF-IDF values of ingredients within the recipes recommended by KNN. The function computes the average TF-IDF score for each recipe and ranks them in descending order. The top 3 recipes with the highest ingredient similarity are selected.

```{r}
tf_idf_func <- function(knn_meals, recipes) {
  #RecipeIngredientParts is currently being mapped as a list where we need it as characters to be able to tokenize the keywords.
  recipes <- recipes %>%
    mutate(RecipeIngredientParts = map_chr(RecipeIngredientParts, toString))
  ingredient_tfidf <- recipes %>%
    unnest_tokens(word, RecipeIngredientParts) %>%
    count(RecipeId, word) %>%
    bind_tf_idf(word, RecipeId, n)
  cosine_similarity <- ingredient_tfidf %>%
    inner_join(knn_meals, by="RecipeId") %>%
    group_by(RecipeId) %>%
    summarize(avg_tf_idf = mean(tf_idf, na.rm = TRUE)) %>% #calculates mean based on tf idf values assigned to words in recipe ingredients
    arrange(desc(avg_tf_idf)) %>%
    slice_max(avg_tf_idf, n = 3) %>%  # Select top 3 recipes
    ungroup()
  top_recipes <- recipes %>%
    filter(RecipeId %in% cosine_similarity$RecipeId)
  return(top_recipes)
}
```

# Results

### Example 1: 185 lbs, 72 inches tall, age 22, Male, activity 3, goal of weight loss, and no allergies
```{r}
#Height in LBS, height in inches, sex either M or F, Activity level 1-5, goal: weight loss muscle gain or maintenance, allergies: either list of them or NA if none
set.seed(42)
user <- list(weight = 185, height = 72, age = 22, sex = "M", activity_level = 3, goal = "Weight Loss", allergies = NA)
user$bmr <- calculate_bmr(user$weight, user$height, user$age, user$sex)
user$tde <- calculate_tde(user$bmr, user$activity_level, user$goal)
user$macros <- calculate_macros(user$tde, user$goal)
filtered_recipes <- filter_meals(recipes, user)

top_knn_meals <- knn_fitting(nuitrition_facts_scaled, filtered_recipes, c(user$macros["Calories"],user$macros["Protein"], user$macros["Carbohydrates"], user$macros["Fats"]))

final_meals <- tf_idf_func(top_knn_meals, filtered_recipes) %>%
  select(-RecipeCategory,-Keywords,-RecipeIngredientQuantities)

print(final_meals)
```

Anaylsis: In Example 1, the recommender was tested on a 22-year-old male weighing 185 lbs, standing 72 inches tall, with an activity level of 3, a goal of weight loss, and no allergies. The three recommended meals all fell within the 80%-120% range of the user’s target caloric, protein, carbohydrate, and fat intake. The caloric values ranging from 753.7 to 839.9. The meals also contained high protein content (73.5-79g), which is important for muscle retention during weight loss. Additionally, since there were no allergies to account for, all meals were appropriate for the user. The recommender successfully provided three valid meals.


### Example 2: 105 lbs, 61 inches tall, age 21, Female, activity 4, goal of muscle gain, and egg allergy.
```{r}
set.seed(42)
user <- list(weight = 105, height = 61, age = 21, sex = "F", activity_level = 4, goal = "Muscle Gain", allergies = "Eggs")
user$bmr <- calculate_bmr(user$weight, user$height, user$age, user$sex)
user$tde <- calculate_tde(user$bmr, user$activity_level, user$goal)
user$macros <- calculate_macros(user$tde, user$goal)
filtered_recipes <- filter_meals(recipes, user)

top_knn_meals <- knn_fitting(nuitrition_facts_scaled, filtered_recipes, c(user$macros["Calories"],user$macros["Protein"], user$macros["Carbohydrates"], user$macros["Fats"]))

final_meals <- tf_idf_func(top_knn_meals, filtered_recipes) %>%
  select(-RecipeCategory,-Keywords,-RecipeIngredientQuantities)

print(final_meals)
```

Analysis: In Example 2, the system was tested with a 21-year-old female weighing 105 lbs, 61 inches tall, with an activity level of 4 and a goal of muscle gain. The key challenge in this case was filtering out meals containing eggs, as the user had an egg allergy. The meals provided contained caloric values ranging from 733.5 to 782.6 and protein levels from 46.8g to 55.6g, aligning well with the muscle gain objective. While the suggested meals were within the acceptable macronutrient range, two of the three meals contained eggs. This failure in allergy filtering means that the system did not successfully meet the user’s dietary restrictions.


### Example 3: 252 lbs, 74 inches tall, age 29, Male, activity 1, goal of maitenance, and no allergies
```{r}
set.seed(42)
user <- list(weight = 252, height = 74, age = 29, sex = "M", activity_level = 1, goal = "Maintenance", allergies = NA)
user$bmr <- calculate_bmr(user$weight, user$height, user$age, user$sex)
user$tde <- calculate_tde(user$bmr, user$activity_level, user$goal)
user$macros <- calculate_macros(user$tde, user$goal)
filtered_recipes <- filter_meals(recipes, user)

top_knn_meals <- knn_fitting(nuitrition_facts_scaled, filtered_recipes, c(user$macros["Calories"],user$macros["Protein"], user$macros["Carbohydrates"], user$macros["Fats"]))

final_meals <- tf_idf_func(top_knn_meals, filtered_recipes) %>%
  select(-RecipeCategory,-Keywords,-RecipeIngredientQuantities)

print(final_meals)
```

Analysis: In Example 3, a 29-year-old male weighing 252 lbs, standing 74 inches tall, with an activity level of 1, a goal of maintenance was analyzed, and no allergies. The three recommended meals all fell within the 80%-120% range of the user’s target caloric, protein, carbohydrate, and fat intake. The meals contained caloric values between 1063.6 and 1187.1, which is appropriate for a higher weight maintenance level. Additionally, since there were no allergies to account for, all meals were appropriate for the user. The recommender successfully provided three valid meals.


### Example 4: 115 lbs, 65 inches tall, age 35, Female, activity 2, goal of weight loss, and no allergies
```{r}
set.seed(42)
user <- list(weight = 115, height = 65, age = 35, sex = "F", activity_level = 2, goal = "Weight Loss", allergies = NA)
user$bmr <- calculate_bmr(user$weight, user$height, user$age, user$sex)
user$tde <- calculate_tde(user$bmr, user$activity_level, user$goal)
user$macros <- calculate_macros(user$tde, user$goal)
filtered_recipes <- filter_meals(recipes, user)

top_knn_meals <- knn_fitting(nuitrition_facts_scaled, filtered_recipes, c(user$macros["Calories"],user$macros["Protein"], user$macros["Carbohydrates"], user$macros["Fats"]))

final_meals <- tf_idf_func(top_knn_meals, filtered_recipes) %>%
  select(-RecipeCategory,-Keywords,-RecipeIngredientQuantities)

print(final_meals)
```

Analysis: In Example 4, a 35-year-old female weighing 115 lbs, 65 inches tall, with an activity level of 2, a goal of weight loss was analyzed, and no allergies. The three recommended meals all fell within the 80%-120% range of the user’s target caloric, protein, carbohydrate, and fat intake. The meals contained caloric values ranging from 407.9 to 482.7, ensuring the user stayed within an appropriate caloric deficit to achieve weight loss. Additionally, since there were no allergies to account for, all meals were appropriate for the user. The recommender successfully provided three valid meals.

# Conclusion

The meal recommender system successfully generated personalized meal plans based on user-specific nutritional needs, fitness goals, and dietary restrictions. By integrating Basal Metabolic Rate (BMR) and Total Daily Energy Expenditure (TDEE) calculations, the system effectively tailored meal recommendations to align with user goals such as weight loss, muscle gain, or maintenance. Using a combination of K-Nearest Neighbors (KNN) and Term Frequency-Inverse Document Frequency (TF-IDF) cosine similarity, the model refined meal selections by balancing macronutrient distribution and ingredient similarity.

Overall, the recommender successfully adjusted caloric intake according to the user's goal in all four cases, ensuring that individuals aiming for weight loss received meals with a caloric deficit, while those focused on muscle gain were given meals with a surplus. Macronutrient targets were well met in every scenario, but the system's failure to properly filter allergens in Example 2 revealed a flaw in the allergy filtering process, as two of the three recommended meals contained eggs despite the user’s allergy. This highlights the need for improving the system’s ability to accurately exclude meals that contain allergens specified by the user.

While the system is good at proposing well-balanced meals, there are a few limitations. The first and obvious improvement is to improve the allergy filtering system to give meals that avoid ingredients that user's are allergic to. Additionally, activity levels and dietary goals are currently roughly classified, perhaps oversimplifying individual variation. The application of generalized BMR and TDEE approximations may not capture unique metabolic differences. Moreover, the system can be improved by refining TF-IDF to detect ingredient synonyms and by incorporating structured meal distribution (e.g., particular breakfast, lunch, and dinner recommendations). Later editions would also expand the dataset for more diverse options for meals and more user feedback will allow for better tailoring of certain meals and dishes.



